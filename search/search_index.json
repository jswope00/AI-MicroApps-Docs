{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About AI MicroApps","text":"<p>AI Microapps are the simplest free way to build AI-powered web apps that you can personalize and share.</p> <p>Let's explain with an \u2728AI-powered\u2728 Haiku App.</p> <p>First, we configure about 10 lines to configure the app. In the image below, we are configuring two text fields to gather the users name and a favorite activity. The last line is the AI prompt that we'll send to AI with the user's input. It looks like this:</p> <p></p> <p>Here is the app we get:</p> <p></p>"},{"location":"#what-next","title":"What Next","text":"<p>Once you've mastered the basics, you can start building customized apps for those long, complicated prompts that you always have trouble remembering exactly how you did them. And you can share your apps with others, allowing them to quickly and intuitively use an AI chain that you've developed.</p> <p>AI Microapps was built by an educator for the education sector. It works well as either:</p> <ul> <li>A course accelerator - Build and share your customized Multiple Choice Question generators, Lesson Plan Builders, Alt Text Wizards and more.</li> <li>Assessment &amp; Feedback Tools - You can create AI-powered exercises for your students like an AI Debate tool about this week's lesson, or a critical thinking practice app that is guided by your instruction.</li> </ul> <p>AI MicroApps have nearly limitless customization capabilities and work with the most popular AI models, so you can make nearly any app and share it with anyone</p> <p>Apps can be deployed to the web via Streamlit for free and nearly instantly.</p> <p>Check out The Gallery to be inspired and see the configuration for any app. Happy Building!</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Home</li> <li>Quickstart</li> <li>Building<ul> <li>Build from Github</li> <li>Build from Local</li> </ul> </li> <li>Deploy</li> <li>References<ul> <li>MicroApps</li> <li>Phases</li> <li>Fields</li> <li>Prompts</li> </ul> </li> </ul>"},{"location":"build_local/","title":"Building Apps from your Local Computer","text":"<p>A local deployment allows you to use your own text or code editor and test your apps locally before pushing them to the web. If you aren't comfortable using a terminal window and some basic git and python commands, then you can continue Building Apps using the Github Editor.</p>"},{"location":"build_local/#pre-requisites","title":"Pre-Requisites","text":"<ol> <li> <p>You should have a forked version of the MicroApp template repository. Follow the instructions in the Quickstart. </p> </li> <li> <p>You need to have Git, Python and Pip installed on your machine, and a basic understanding of how to use them. </p> </li> </ol>"},{"location":"build_local/#clone-the-repository-and-configure-your-application","title":"Clone the Repository and Configure your Application","text":"<ol> <li> <p>In your terminal window, navigate to a directory where you want to keep your MicroApps and clone your forked repository:</p> <pre><code>git clone https://github.com/[Github User Name]/AI-MicroApps.git\n</code></pre> </li> <li> <p>Navigate into the newly created directory. </p> <pre><code>cd AI-MicroApps\n</code></pre> </li> <li> <p>Create a virtual environment</p> <pre><code>python3 -m venv venv\n</code></pre> </li> <li> <p>Activate your virtual environment.</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Note: You should activate your virtual environment any time you are running or working in your AI-MicroApps directory.</p> </li> <li> <p>With your virtual environment activated, install the requirements. </p> <pre><code>pip3 install -r requirements.txt\n</code></pre> </li> <li> <p>Create a <code>.env</code> file in the root directory and paste the following:</p> <pre><code>OPENAI_API_KEY=\"[My OpenAI Key]\"\nGOOGLE_API_KEY=\"[My Google Gemini Key]\"\nCLAUDE_API_KEY=\"[My Claude Key]\"\nPERPLEXITY_API_KEY=\"[My Perplexity Key]\"\n</code></pre> <p>Note: You can leave placeholders for any keys you don't have or don't want to use. You should at least add the OpenAI key, since the template defaults to OpenAI. </p> </li> </ol>"},{"location":"build_local/#run-your-apps","title":"Run Your Apps","text":"<ol> <li> <p>You can run either a single app or the App Directory to see all Published Apps. </p> <p>To run a single app:</p> <pre><code>streamlit run [app config file]\n</code></pre> <p>e.g. <code>streamlit run app_hello_world.py</code></p> <p>To run the App Directory and view all files: </p> <pre><code>streamlit run apps_directory.py\n</code></pre> </li> <li> <p>An app window should launch at <code>localhost:8501</code></p> </li> </ol>"},{"location":"build_local/#customize-or-build-an-app","title":"Customize or Build an App","text":"<ol> <li> <p>It is generally easier to modify an existing app configuration rather than start from scratch. You can use the <code>app_hello_world.py</code> app as our simplest example. If you want to modify that app to write a sonnet about you and your favorite animal (the example from Quickstart), you can replace all the content in that file with the following: </p> <pre><code>PHASES = {\n    \"phase1\": {\n        \"name\": \"What is your name?\",\n        \"fields\": {\n                \"name\": {\n                \"type\": \"text_input\",\n                \"label\": \"What is your first name?\",\n            },\n            \"animal\": {\n                \"type\": \"text_input\",\n                \"label\": \"What is one of your favorite animals?\"\n            }\n        },\n        \"user_prompt\": \"My name is {name} and I like this animal: {animal}. Write a sonnet about me and my favorite animal.\",\n    },\n}\n\nfrom core_logic.main import main\nif __name__ == \"__main__\":\n    main(config=globals())\n</code></pre> </li> <li> <p>To get a better understanding of the configuration options you have when building apps, move on to the reference documentation. </p> <ul> <li>Phases, Fields and Runs</li> <li>Phases</li> <li>Fields</li> <li>Prompts</li> </ul> </li> <li> <p>Most changes are reflected once you save your app configuration file. Occasionally, changes might require that you restart the Streamlit server. </p> <p>To stop your streamlit server, navigate to terminal where your app is running and type <code>Ctrl + C</code></p> <p>To start your streamlit server, the command is either <code>streamlit run [app config file]</code> for a single app or <code>streamlit run apps_directory.py</code> for the Apps Directory</p> </li> </ol>"},{"location":"build_local/#commit-your-changes","title":"Commit your Changes","text":"<ol> <li> <p>When you are ready to deploy your changes to the web, you must commit them to the Git repository first. The commands might look like this: </p> <p><code>git add .</code> To add all your files to a git commit.</p> <p><code>git commit -m \"[My Commit Message]\"</code> to add a descriptive message about what you are committing. </p> <p><code>git push origin main</code> to push your changes to your remote repository. </p> <p>Use Github's official documentation or an AI service like ChatGPT for any questions about how to commit your changes to your remote repository. </p> </li> </ol>"},{"location":"build_local/#deploy-to-the-web","title":"Deploy to the Web","text":"<ol> <li> <p>There are two ways to deploy to the web via Streamlit:</p> <ul> <li> <p>Deploy a Single App - Deploy a single app at a publicly accessible website. </p> </li> <li> <p>Deploy your App Dashboard - Deploy a gallery of all your published apps. </p> </li> </ul> </li> </ol>"},{"location":"build_online/","title":"Building Apps via Github Editor","text":"<p>Building Apps via the Github Editor allows you to build apps without having to install anything on  your local machine. It is considered simpler than buildng on your local machine and is perfectly suitable for those who aren't comfortable using basic git or python commands in a terminal window. </p> <p>Most of the instructions here are also part of the Quickstart Guide.</p>"},{"location":"build_online/#before-you-begin","title":"Before you Begin","text":"<ol> <li> <p>Before you continue, ensure that you have completed the Pre-Requisites and Clone the Repository and Configure your Application sections of the Quickstart Guide and have the following</p> <ul> <li> <p>Your own forked version of MicroApp template repository</p> </li> <li> <p>A github.com account</p> </li> <li> <p>A streamlit.io account</p> </li> <li> <p>An AI key (at least an OpenAI key)</p> </li> </ul> </li> </ol>"},{"location":"build_online/#customize-or-build-an-app","title":"Customize or Build an App","text":"<ol> <li> <p>Go to your forked GitHub repository.</p> </li> <li> <p>It is generally easier to modify an existing app configuration rather than start from scratch. You can use the <code>app_hello_world.py</code> app as our simplest example. If you want to modify that app to write a sonnet about you and your favorite animal (the example from Quickstart), you can replace all the content in that file with the following: </p> <pre><code>```python\nPHASES = {\n    \"phase1\": {\n        \"name\": \"What is your name?\",\n        \"fields\": {\n                \"name\": {\n                \"type\": \"text_input\",\n                \"label\": \"What is your first name?\",\n            },\n            \"animal\": {\n                \"type\": \"text_input\",\n                \"label\": \"What is one of your favorite animals?\"\n            }\n        },\n        \"user_prompt\": \"My name is {name} and I like this animal: {animal}. Write a sonnet about me and my favorite animal.\",\n    },\n}\n\nfrom core_logic.main import main\nif __name__ == \"__main__\":\n    main(config=globals())\n```\n</code></pre> </li> <li> <p>To get a better understanding of the configuration options you have when building apps, move on to the reference documentation. </p> <ul> <li>Phases, Fields and Runs</li> <li>Phases</li> <li>Fields</li> <li>Prompts</li> </ul> </li> <li> <p>Click \"Commit changes\" to save the updated file. You'll be asked to add a commit message and confirm your commit. </p> <p></p> </li> </ol>"},{"location":"build_online/#deploying-to-the-web","title":"Deploying to the Web","text":"<ol> <li> <p>There are two ways to deploy to the web via Streamlit:</p> <ul> <li> <p>Deploy a Single App - Deploy a single app at a publicly accessible website. </p> </li> <li> <p>Deploy your App Dashboard - Deploy a gallery of all your published apps. </p> </li> </ul> </li> </ol>"},{"location":"concept_phases_fields_runs/","title":"Understanding Phases, Fields and Prompts","text":"<p>MicroApps are made up of Phases, Fields, and Prompts. </p> <p>A very simple app might have one Phase (Get the User's Name), one Field (What is your Name?), and one Prompt (My name is {name}, say hello to me.)</p> <p>This is what they looks like in a configuration file:</p> <p></p> <p>And this is what that app would look like: </p> <p></p> <p>A slightly more complex app might have two phases, two fields, and two prompts. In this way, the app can gather a user's name and welcome them in Phase 1, and then gather information about their favorite subject to generate a fun question in the next phase. The configuration would look like this: </p> <p></p> <p>And the app would look like this:</p> <p></p>"},{"location":"concept_phases_fields_runs/#phases","title":"Phases","text":"<p>Phases refer to distinct stages or steps in a process or workflow when interacting with an AI tool. These could involve different levels of processing, analysis, or interaction.</p> <p>Typically, a phase ends with a submission to and response from AI. </p> <p>For information on various kinds of supported phases, see Phases</p>"},{"location":"concept_phases_fields_runs/#fields","title":"Fields","text":"<p>Fields are inputs that the app requests from the user. </p> <p>Those inputs are typically used to construct the prompt to the AI.</p> <p>For example, fields might include  distinct asks for inputs ie. \"name,\" \"level of education,\" and \u201csubject area\u201d  or an essay input from a student. </p> <p>For information on various kinds of supported fields, see Fields</p>"},{"location":"concept_phases_fields_runs/#prompts","title":"Prompts","text":"<p>Prompts are specific instructions or input given to an AI tool to generate a response or perform an action. A prompt is often a question, statement, or command that guides the AI's behavior.</p> <p>Prompts include field data by enclosing the field name in curly brackets <code>{}</code></p> <p>Prompts can also be conditional based on field inputs. For information on building prompts, including conditional prompts, see [TO-DO: Build this page]Reference: Prompts</p>"},{"location":"concept_phases_fields_runs/#scoring-phases","title":"Scoring Phases","text":"<p>An important function of phases is to provide an opportunity to score a user's input to determine if they've met the requirements to move forward. For example, if you have built a critical thinking app for a case study, you'd want to make sure that the student can accurately describe what they case study is about before they move on to any kind of analysis of the study. </p> <p>You can learn more about phase scoring in the Prompts</p> <p></p>"},{"location":"deploy/","title":"Deploy to the Web","text":"<p>All apps are deployed via a free hosting service called Streamlit. </p>"},{"location":"deploy/#deploy-a-single-app","title":"Deploy a Single App","text":"<ol> <li> <p>Log into your Streamlit account. </p> </li> <li> <p>Once logged in, click on \"Create an app\" in the top right corner.</p> <p></p> </li> <li> <p>Choose the option <code>I have an app</code> and select your forked GitHub repository.</p> </li> <li> <p>Change the file path to the configuration file for the app you want to run. </p> <p>e.g. <code>app_hello_world.py</code></p> <p>Note: If you want to deploy more apps, simply use a different File Path and different App URL for each new app. </p> </li> <li> <p>Assign a memorable subdomain name for your MicroApp. </p> <p></p> </li> <li> <p>In <code>Advanced Settings</code>, add your AI API key(s).</p> <p>The format is:</p> <pre><code>OPENAI_API_KEY=\"[My OpenAI Key]\"\nGOOGLE_API_KEY=\"[My Google Gemini Key]\"\nCLAUDE_API_KEY=\"[My Claude Key]\"\nPERPLEXITY_API_KEY=\"[My Perplexity Key]\"\n</code></pre> <p></p> <p>Note: You can leave placeholders for any keys you don't have or don't want to use. You should at least add the OpenAI key, since the template defaults to OpenAI. </p> </li> <li> <p>Save your Advanced Settings, and click <code>Deploy</code> to deploy your app. </p> </li> <li> <p>Congratulations! You should have a working and shareable app at the URL that you specified. </p> <p></p> </li> </ol>"},{"location":"deploy/#deploy-an-apps-directory","title":"Deploy an Apps Directory","text":"<p>Your Apps Directory is automatically generated from apps that have <code>PUBLISHED = True</code> and <code>APP_URL=\"[some url]\"</code> in their respective configuration files. Therefore, when you launch your directory the first time, those settings will be the same as the original MicroApp template repository. It is recommended that you unpublish the old apps and republish apps to your directory after you deploy them to your own URLs. </p> <ol> <li> <p>Repeat the steps above, but input the <code>apps_directory.py</code> for the Main File Path instead of the configuration file for a specific app. </p> </li> <li> <p>Congratulations! You should have a working Apps Directory at the URL that you specified. </p> <p></p> </li> </ol>"},{"location":"quickstart/","title":"AI MicroApps Quickstart","text":"<p>The easiest way to get an app up and running is to perform the whole process in Github and Streamlit, and it can be done in just a few minutes. </p>"},{"location":"quickstart/#pre-requisites","title":"Pre-Requisites","text":"<ol> <li> <p>Before you begin, ensure you have accounts at these two (free) services:</p> <ul> <li> <p>Github.com</p> </li> <li> <p>Streamlit.io</p> </li> </ul> </li> <li> <p>Generate an API key with an AI service. For the quickstart, we'll use OpenAI. </p> <ul> <li> <p>If you haven\u2019t already, create an account at OpenAI. </p> </li> <li> <p>In the OpenAI Dashboard, go to the API section and create a new secret key. Save this key for later. </p> <p> </p> </li> </ul> <p>Note: OpenAI changes the interface often, so it might look different from this screenshot </p> </li> </ol>"},{"location":"quickstart/#fork-the-ai-microapp-repository","title":"Fork the AI MicroApp Repository","text":"<ol> <li> <p>Go to the MicroApp template repository</p> </li> <li> <p>Click on the \"Fork\" button to create a copy of the repository in your own GitHub account.</p> <p></p> </li> <li> <p>Leave the default name for the repository and make sure to fork only the main branch.</p> <p></p> </li> </ol>"},{"location":"quickstart/#customize-an-app-in-your-forked-repository","title":"Customize an App in your Forked Repository","text":"<ol> <li> <p>Go to your new GitHub repository.</p> </li> <li> <p>Find and click on the <code>app_hello_world.py</code> file to bring up a view of the file. You can use the search bar if you like: </p> <p></p> </li> <li> <p>Click on the pencil icon to edit the file.</p> <p></p> </li> <li> <p>Make some edits to the app configuration. If you want to use the edits from the quickstart video, you can replace all of the configuration in the file with the following lines: </p> <pre><code>```python\nPHASES = {\n    \"phase1\": {\n        \"name\": \"What is your name?\",\n        \"fields\": {\n                \"name\": {\n                \"type\": \"text_input\",\n                \"label\": \"What is your first name?\",\n            },\n            \"animal\": {\n                \"type\": \"text_input\",\n                \"label\": \"What is one of your favorite animals?\"\n            }\n        },\n        \"user_prompt\": \"My name is {name} and I like this animal: {animal}. Write a sonnet about me and my favorite animal.\",\n    },\n}\n\nfrom core_logic.main import main\nif __name__ == \"__main__\":\n    main(config=globals())\n```\n</code></pre> </li> <li> <p>Click \"Commit changes\" to save the updated file. You'll be asked to add a commit message and confirm your commit. </p> <p></p> </li> </ol>"},{"location":"quickstart/#deploy-to-the-web-via-streamlit","title":"Deploy to the Web via Streamlit","text":"<ol> <li> <p>Log into your Streamlit account. </p> </li> <li> <p>Once logged in, click on \"Create an app\" in the top right corner.</p> <p></p> </li> <li> <p>Choose the option <code>I have an app</code> and select your forked GitHub repository.</p> </li> <li> <p>Change the file path to the configuration file for the app you want to run. </p> <p>For the quickstart, this is <code>app_hello_world.py</code></p> </li> <li> <p>Assign a memorable subdomain name for your MicroApp. </p> <p></p> </li> <li> <p>In <code>Advanced Settings</code>, add your OpenAI API key. For the quickstart, we'll just add the OpenAI key that we generated above. </p> <p>The format is:</p> <pre><code>OPENAI_API_KEY=\"[Your API Key]\"\n</code></pre> <p></p> </li> <li> <p>Save your Advanced Settings, and click <code>Deploy</code> to deploy your app. </p> </li> <li> <p>Congratulations! You should have a working and shareable app at the URL that you specified. </p> <p></p> </li> </ol> <p>If you feel confident with this quickstart, next try deploying locally so that you can use your own text/code editors and test on your local computer. </p>"},{"location":"reference_fields/","title":"Fields","text":"<p>These are the fields supported by MicroApps. They are a subset of fields that are supported by Streamlit and use much of the same syntax. </p> <ul> <li>Fields<ul> <li>text_input</li> <li>text_area</li> <li>chat_input</li> <li>warning</li> <li>button</li> <li>Radio</li> <li>markdown</li> <li>selectbox</li> <li>checkbox</li> <li>Slider</li> <li>number_input</li> <li>Image</li> <li>file_uploader</li> <li>Conditional Fields<ul> <li>Boolean Conditionals</li> <li>Numeric Conditionals</li> <li>String Conditionals</li> <li>List Conditionals</li> <li>Logic (and/or) Conditionals</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference_fields/#text_input","title":"text_input","text":"<p>Display a single-line text input widget.</p> <p></p> <p>Parameters</p> type (\"default\" or \"password\")     The type of the text input. This can be either \"default\" (for a regular text input), or \"password\" (for a text input that masks the user's typed value). Defaults to \"default\".     label (str)     A short label explaining to the user what this input is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     value (object or None)     The text value of this widget when it first renders. This will be cast to str internally. If None, will initialize empty and return None until the user provides input. Defaults to empty string.     max_chars (int or None)     Max number of characters allowed in text input.     help (str)     An optional tooltip that gets displayed next to the input.     placeholder (str or None)  <p> [keyword only]     An optional string displayed when the text input is empty. If None, no text is displayed.     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#text_area","title":"text_area","text":"<p>Display a multi-line text input widget.</p> <p></p> <p>Parameters</p> label (str)     A short label explaining to the user what this input is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     value (object or None)     The text value of this widget when it first renders. This will be cast to str internally. If None, will initialize empty and return None until the user provides input. Defaults to empty string.     height (int or None)     Desired height of the UI element expressed in pixels. If None, a default height is used.     max_chars (int or None)     Maximum number of characters allowed in text area.     help (str)     An optional tooltip that gets displayed next to the textarea.     placeholder (str or None) <p> [keyword only]     An optional string displayed when the text area is empty. If None, no text is displayed.     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#chat_input","title":"chat_input","text":"<p>The chat_input field is a chatbot like multi-turn input field where the user can have a conversation with the AI assistant. This field is especially useful in applications where ongoing dialogue is important, and/or the number of turns in the conversation is unknown.</p> <p></p> <p>Parameters:</p> max_messages (int or None) This optional parameter sets the maximum number of messages that can be sent and received in the conversation. In this case, a \"message\" is defined as a turn in the conversation with a user input and a response from the assistant. (So, \"Hi Assistant\", \"Hi John\", \"Goodbye Assistant\", \"Goodbye John\" would be 2 messages). If left unset, the default maximum is 50 messages.  initial_assistant_message (str) This optional parameter specifies the initial message that the AI assistant will display to the user at the start of the conversation. This helps set the context for users when they first engage with the chat. placeholder (str) This optional parameter sets the placeholder text that will be displayed in the input field when the user has not yet sent a message. This helps guide users on what to input."},{"location":"reference_fields/#warning","title":"warning","text":"<p>Display warning message.</p> body (str)     The warning text to display."},{"location":"reference_fields/#button","title":"button","text":"<p>Display a button widget.</p> <p></p> <p>Parameters:</p> label (str)     A short label explaining to the user what this button is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives.     help (str)     An optional tooltip that gets displayed when the button is hovered over.     on_click (callable)     An optional callback invoked when this button is clicked.     type (\"secondary\" or \"primary\") <p> [keyword only]     An optional string that specifies the button type. Can be \"primary\" for a button with additional emphasis or \"secondary\" for a normal button. Defaults to \"secondary\"."},{"location":"reference_fields/#radio","title":"Radio","text":"<p>Display a radio button widget.</p> <p></p> <p>Parameters:</p> label (str)     A short label explaining to the user what this radio group is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     options (Iterable)     Labels for the select options in an Iterable. This can be a list, set, or anything supported by st.dataframe. If options is dataframe-like, the first column will be used. Each label will be cast to str internally by default. <p> Labels can include markdown as described in the label parameter and will be cast to str internally by default.     index (int or None)     The index of the preselected option on first render. If None, will initialize empty and return None until the user selects an option. Defaults to 0 (the first option).     help (str)     An optional tooltip that gets displayed next to the radio.     horizontal (bool) <p> [keyword only]     An optional boolean, which orients the radio group horizontally. The default is false (vertical buttons).     captions (iterable of str or None) <p> [keyword only]     A list of captions to show below each radio button. If None (default), no captions are shown.     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#markdown","title":"markdown","text":"<p>Display string formatted as Markdown.</p> <p></p> <p>Parameters:</p> body (str)     The string to display as GitHub-flavored Markdown. Syntax information can be found at: https://github.github.com/gfm <p> This also supports: <ul> <li>Emoji shortcodes, such as :+1: and :sunglasses:. For a list of all supported codes, see https://share.streamlit.io/streamlit/emoji-shortcodes.   <li>Google Material Symbols (rounded style), using the syntax :material/icon_name:, where \"icon_name\" is the name of the icon in snake case. For a complete list of icons, see Google's Material Symbols font library.  <li>LaTeX expressions, by wrapping them in \"$\" or \"$$\" (the \"$$\" must be on their own lines). Supported LaTeX functions are listed at https://katex.org/docs/supported.html <li>Colored text and background colors for text, using the syntax :color[text to be colored] and :color-background[text to be colored], respectively. color must be replaced with any of the following supported colors: blue, green, orange, red, violet, gray/grey, rainbow. For example, you can use :orange[your text here] or :blue-background[your text here]. </li> unsafe_allow_html (bool)     Whether to render HTML within body. If this is False (default), any HTML tags found in body will be escaped and therefore treated as raw text. If this is True, any HTML expressions within body will be rendered. <p> Adding custom HTML to your app impacts safety, styling, and maintainability. <p> Note: If you only want to insert HTML or CSS without Markdown text, we recommend using st.html instead.     help (str) <p> [keyword only]     An optional tooltip that gets displayed next to the Markdown."},{"location":"reference_fields/#selectbox","title":"selectbox","text":"<p>Display a select widget.</p> <p></p> <p>Parameters:</p> label (str)     A short label explaining to the user what this select widget is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     options (Iterable)     Labels for the select options in an Iterable. This can be a list, set, or anything supported by st.dataframe. If options is dataframe-like, the first column will be used. Each label will be cast to str internally by default.     index (int)     The index of the preselected option on first render. If None, will initialize empty and return None until the user selects an option. Defaults to 0 (the first option).     help (str)     An optional tooltip that gets displayed next to the selectbox.     placeholder (str) <p> [keyword only]     A string to display when no options are selected. Defaults to \"Choose an option\".     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#checkbox","title":"checkbox","text":"<p>Display a checkbox widget.</p> <p></p> <p>Parameters:</p> label (str)     A short label explaining to the user what this checkbox is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     value (bool)     Preselect the checkbox when it first renders. This will be cast to bool internally.     help (str)     An optional tooltip that gets displayed next to the checkbox.     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#slider","title":"Slider","text":"<p>Display a slider widget.</p> <p></p> <p>This supports int, float, date, time, and datetime types.</p> <p>This also allows you to render a range slider by passing a two-element tuple or list as the value.</p> <p>Note: Integer values exceeding +/- (1&lt;&lt;53) - 1 cannot be accurately stored or returned by the widget due to serialization constraints between the Python server and JavaScript client. You must handle such numbers as floats, leading to a loss in precision.</p> <p>Parameters:</p> label (str)     A short label explaining to the user what this slider is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     min_value (a supported type or None)     The minimum permitted value. Defaults to 0 if the value is an int, 0.0 if a float, value - timedelta(days=14) if a date/datetime, time.min if a time.     max_value (a supported type or None)     The maximum permitted value. Defaults to 100 if the value is an int, 1.0 if a float, value + timedelta(days=14) if a date/datetime, time.max if a time.     value (a supported type or a tuple/list of supported types or None)     The value of the slider when it first renders. If a tuple/list of two values is passed here, then a range slider with those lower and upper bounds is rendered. For example, if set to (1, 10) the slider will have a selectable range between 1 and 10. Defaults to min_value.     step (int, float, timedelta, or None)     The stepping interval. Defaults to 1 if the value is an int, 0.01 if a float, timedelta(days=1) if a date/datetime, timedelta(minutes=15) if a time (or if max_value - min_value &lt; 1 day)     help (str)     An optional tooltip that gets displayed next to the slider.     label_visibility (\"visible\", \"hidden\", or \"collapsed\")     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#number_input","title":"number_input","text":"<p>Display a numeric input widget.</p> <p></p> <p>Note: Integer values exceeding +/- (1&lt;&lt;53) - 1 cannot be accurately stored or returned by the widget due to serialization contstraints between the Python server and JavaScript client. You must handle such numbers as floats, leading to a loss in precision.</p> <p>Parameters:</p> label (str)     A short label explaining to the user what this input is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     min_value (int, float, or None)     The minimum permitted value. If None, there will be no minimum.     max_value (int, float, or None)     The maximum permitted value. If None, there will be no maximum.     value (int, float, \"min\" or None)     The value of this widget when it first renders. If None, will initialize empty and return None until the user provides input. If \"min\" (default), will initialize with min_value, or 0.0 if min_value is None.     step (int, float, or None)     The stepping interval. Defaults to 1 if the value is an int, 0.01 otherwise. If the value is not specified, the format parameter will be used.     help (str)     An optional tooltip that gets displayed next to the input.     placeholder (str or None) <p> [keyword only]     An optional string displayed when the number input is empty. If None, no placeholder is displayed.     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#image","title":"Image","text":"<p>Display an image with optional caption. </p> <p></p> <p>Parameters:</p> image (numpy.ndarray, [numpy.ndarray], BytesIO, str, or [str])     Monochrome image of shape (w,h) or (w,h,1) OR a color image of shape (w,h,3) OR an RGBA image of shape (w,h,4) OR a URL to fetch the image from OR a path of a local image file OR an SVG XML string like &lt;svg xmlns=...&lt;/svg&gt; OR a list of one of the above, to display multiple images.     caption (str or list of str)     Image caption. If displaying multiple images, caption should be a list of captions (one for each image)."},{"location":"reference_fields/#file_uploader","title":"file_uploader","text":"<p>Display a file uploader widget.</p> <p></p> <p>By default, uploaded files are limited to 200MB. You can configure this using the server.maxUploadSize config option. For more info on how to set config options, see https://docs.streamlit.io/develop/api-reference/configuration/config.toml </p> <p>Parameters:</p> label (str)     A short label explaining to the user what this file uploader is for. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, and Links. <p> Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., \"1\\. Not an ordered list\". <p> See the body parameter of st.markdown for additional, supported Markdown directives. <p> For accessibility reasons, you should never set an empty label (label=\"\") but hide it with label_visibility if needed. In the future, we may disallow empty labels by raising an exception.     type (str or list of str or None)     Array of allowed extensions. ['png', 'jpg'] The default is None, which means all extensions are allowed.     help (str)     A tooltip that gets displayed next to the file uploader.     label_visibility (\"visible\", \"hidden\", or \"collapsed\") <p> [keyword only]     The visibility of the label. If \"hidden\", the label doesn't show but there is still empty space for it above the widget (equivalent to label=\"\"). If \"collapsed\", both the label and the space are removed. Default is \"visible\"."},{"location":"reference_fields/#conditional-fields","title":"Conditional Fields","text":"<p>Fields can be shown or hidden based on conditional logic.</p> <p>Let's look at an example. Let's say we want to ask our user to choose their favorite character from a book, and then ask them a question about that character. We only want to show the second question after they've answered the first. </p> <p>This is our configuration: </p> <pre><code>  PHASES = {\n      \"phase1\": {\n          \"name\": \"Tell me about a character in Canterbury Tales\",\n          \"fields\": {\n                  \"character\": {\n                     \"type\": \"radio\",\n                     \"label\": \"Choose your favorite character\",\n                     \"options\": ['The Knight', 'The Monk', 'The Pardoner']\n              },\n                 \"represent\": {\n                     \"type\": \"text_area\",\n                     \"label\": \"What does this character represent in the book?\",\n                     \"showIf\": {\"character\": {\"$ne\": \"\"}}\n              }\n          },\n          \"show_prompt\": True,\n          \"user_prompt\": \"My favorite character from Canterbury Tales is {character} and this is what they represent in the book: {represent}. Provide feedback on my analysis. \"\n      },\n  }\n</code></pre> <p>And this is the rendered app before the user has met the conditional (answered the first question): </p> <p></p> <p>And here is the app again after the user has met the conditional (they answered the first question), so the second question appears.</p> <p></p>"},{"location":"reference_fields/#boolean-conditionals","title":"Boolean Conditionals","text":"<p>Boolean values can be conditional based on whether they are True or False. If the condition is met, then the prompt snippet is included.  </p> <p>Boolean conditionals can be: </p> <ul> <li>True</li> <li>False</li> </ul> <p>Code Sample</p> <pre><code>          \"fields\": {\n                  \"read\": {\n                     \"type\": \"checkbox\",\n                     \"label\": \"Have you read the book?\",\n              },\n                 \"represent\": {\n                     \"type\": \"text_area\",\n                     \"label\": \"Provide a two paragraph summary of the book.\",\n                     \"showIf\": {\"read\": True}\n              }\n</code></pre>"},{"location":"reference_fields/#numeric-conditionals","title":"Numeric Conditionals","text":"<p>Numeric values can be conditional based on numbers that you choose. If the condition is met, then the prompt snippet is included.  </p> <p>Numeric conditionals can be: </p> <ul> <li>equal to </li> <li>greater than (<code>$gt</code>)</li> <li>less than (<code>$lt</code>)</li> <li>greater than or equal to (<code>$gte</code>)</li> <li>less than or equal to (<code>$lte</code>)</li> <li>not equal to (<code>$ne</code>)</li> </ul> <p>Code Sample</p> <pre><code>          \"fields\": {\n                  \"age\": {\n                     \"type\": \"number_input\",\n                     \"label\": \"What is your age?\",\n              },\n                 \"license\": {\n                     \"type\": \"checkbox\",\n                     \"label\": \"Do you have a valid driver's license?\",\n                     \"showIf\": {\"age\": {\"$gte\": 16}}\n              }\n</code></pre>"},{"location":"reference_fields/#string-conditionals","title":"String Conditionals","text":"<p>String values can be conditional based on if they match a string that you choose. If the condition is met, then the prompt snippet is included.  </p> <p>String conditionals can be: </p> <ul> <li>equal to </li> <li>not equal to (<code>$ne</code>)</li> </ul> <p>Code Sample</p> <pre><code>          \"fields\": {\n                  \"education\": {\n                     \"type\": \"radio\",\n                     \"label\": \"What is your education level?\",\n                     \"options\": ['High School or Less','Some College Education']\n              },\n                 \"higher_education\": {\n                     \"type\": \"radio\",\n                     \"label\": \"What is your highest degree achieved?\",\n                     \"options\": ['None','Associates','Bachelor','Masters or PhD'],\n                     \"showIf\": {\"education\": \"Some College Education\"}\n              }\n</code></pre>"},{"location":"reference_fields/#list-conditionals","title":"List Conditionals","text":"<p>Lists can be conditional based on whether they contain or do not contain certain values. If the condition is met, then the prompt snippet is included. </p> <ul> <li>in (<code>$in</code>)</li> <li>not in (<code>$nin</code>)</li> </ul> <p>Code Sample</p> <p>Note: AI MicroApps don't support any fields that return lists at the moment. Therefore, there are no code samples and this is a placeholder for when we do support list input fields. </p>"},{"location":"reference_fields/#logic-andor-conditionals","title":"Logic (and/or) Conditionals","text":"<p>Conditionals can be combined with and, or, and not</p> <ul> <li>and (<code>$and</code>)</li> <li>or (<code>$or</code>)</li> </ul> <p>Code Sample</p> <pre><code>          \"fields\": {\n              \"age\": {\n                 \"type\": \"number_input\",\n                 \"label\": \"What is your age?\",\n              },\n              \"license\": {\n                 \"type\": \"checkbox\",\n                 \"label\": \"Do you have a valid driver's license?\",\n                 \"showIf\": {\"age\": {\"$gte\": 16}}\n              },\n              \"driver\": {\n                 \"type\": \"radio\",\n                 \"label\": \"Can you get a parent or guardian to drive you when you need it?\",\n                 \"options\": ['yes','no'],\n                 \"showIf\": {\n                    \"$or\": [\n                       {\"age\": {\"$lt\": 16}},\n                       {\"license\": False}\n                    ]\n                 }\n              }\n</code></pre>"},{"location":"reference_phases/","title":"Phases","text":"<p>These are the types of phases supported by MicroApps.</p> <ul> <li>Phases<ul> <li>Basic Feedback (Default)</li> <li>No Submission</li> <li>Skippable Phase</li> <li>Scored Phase</li> <li>Hard-Coded Phase</li> <li>Phase with Revisions</li> <li>Phase with Editable Prompt</li> <li>Phase Combining Several Rules</li> </ul> </li> </ul>"},{"location":"reference_phases/#basic-feedback-default","title":"Basic Feedback (Default)","text":"<p>The most basic phase asks a question, receives a response from the user, and sends that response in a prompt to the AI for feedback.</p> <p></p> <p>Parameters</p> <p>n/a</p> <p>Code Sample</p> <pre><code>\"phase2\": {\n    \"name\": \"Basic Feedback\",\n    \"fields\": {\n        \"name\": {\n            \"type\": \"text_input\",\n            \"label\": \"\"\"What is your name?\"\"\",\n            \"value\": \"Abe\"\n        }\n    },\n    \"user_prompt\": \"My name is {name}. Hello!\",\n},\n</code></pre>"},{"location":"reference_phases/#no-submission","title":"No Submission","text":"<p>A phase can be purely informational and have no submission. It simply displays the fields and moves onto the next phase.</p> <p></p> <p>Parameters</p> Parameter Type no_submission bool <p>Code Sample</p> <pre><code>\"phase1\": {\n    \"name\": \"No Submission\",\n    \"fields\": {\n        \"markdown\": {\n            \"type\": \"markdown\",\n            \"body\": \"\"\"A phase can be purely informational and have no submission. It simply displays the fields and moves onto the next phase.\"\"\",\n            \"unsafe_allow_html\": True\n        }\n    },\n    \"no_submission\": True\n},\n</code></pre>"},{"location":"reference_phases/#skippable-phase","title":"Skippable Phase","text":"<p>Phases can be skippable. Since an AI can make mistakes and get confused, it is recommended that phases are skippable whenever possible.</p> <p></p> <p>Parameters</p> Parameter Type allow_skip bool <p>Code Sample</p> <pre><code>\"phase3\": {\n    \"name\": \"Skippable Phase\",\n    \"fields\": {\n        \"skip_me\": {\n            \"type\": \"text_area\",\n            \"label\": \"Write a 2,000 word analysis on The Epistemological Implications of Quantum Entanglement on Post-Structuralist Interpretations of Derrida\u2019s Deconstructionism\",\n        }\n    },\n    \"phase_instructions\": \"Analyze the user's essay on The Epistemological Implications of Quantum Entanglement on Post-Structuralist Interpretations of Derrida\u2019s Deconstructionism\",\n    \"user_prompt\": \"{skip_me}\",\n    \"allow_skip\": True,\n},\n</code></pre>"},{"location":"reference_phases/#scored-phase","title":"Scored Phase","text":"<p>Phases can be scored according to a rubric. In general, AI provides more accurate scoring when instructions are specific and the criteria are measurable.</p> <p></p> <p>Parameters</p> Parameter Type scored_phase bool rubric string minimum_score integer <p>Code Sample</p> <pre><code>\"phase4\": {\n    \"name\": \"Scored Phase\",\n    \"fields\": {\n        \"animal\": {\n            \"type\": \"text_input\",\n            \"label\": \"Provide the name of an animal. Any animal is fine, but it must be an animal.\",\n            \"value\": \"Monkey\"\n        }\n    },\n    \"phase_instructions\": \"The user will provide the name of an animal. Encourage them if they input a valid animal. Explain that they are incorrect if they do not.\",\n    \"user_prompt\": \"{animal}\",\n    \"allow_skip\": True,\n    \"scored_phase\": True,\n    \"rubric\": \"\"\"\n            1. Animal Name\n                1 point - The user provides a valid animal name.\n                0 points - The user provides input that does not include a valid animal name. \n        \"\"\",\n    \"minimum_score\": 1\n},\n</code></pre> <p>Rubrics</p> <p>Rubrics are interpreted by AI, so they can typically be human readable. We have found rubrics with one or more dimensions where the score is clearly stated and the metrics are measureable to work well. Here is a sample rubric format:</p> <pre><code>  Dimension 1\n     3 points - Your specific criteria for maximum points in this dimension\n     2 points - Your criteria for 2 points in this dimension\n     0 points - Your criteria for no points in this dimension\n  Dimension 2\n     5 points - Your specific criteria for maximum points in this dimension\n     3 points - Your criteria for 3 points in this dimension\n     1 points - Your criteria for 1 point in this dimension\n</code></pre>"},{"location":"reference_phases/#hard-coded-phase","title":"Hard-Coded Phase","text":"<p>You can provide hard-coded responses. For example, if you are just collecting some input and you want to provide static feedback for that input.</p> <p></p> <p>Parameters</p> Parameter Type ai_response bool custom_response string <p>Note: You can use user inputs in your hard-coded responses, by surrounding field names in the typical curly brackets <code>{}</code></p> <p>Code Sample</p> <pre><code>\"phase5\": {\n    \"name\": \"Hard-Coded Phase\",\n    \"fields\": {\n        \"name2\": {\n            \"type\": \"text_input\",\n            \"label\": \"What is another name?\",\n            \"key\": \"name2\",\n            \"value\": \"Abe\"\n        }\n    },\n    \"allow_skip\": True,\n    \"ai_response\": False,\n    \"custom_response\": \"Hi {name2}! This is a hard-coded response, it is not being generated by AI.\"\n},\n</code></pre>"},{"location":"reference_phases/#phase-with-revisions","title":"Phase with Revisions","text":"<p>Any phase can have the ability to allow revisions, and a limit to the number of revisions available. This is useful if the AI is generating something that the user might want to tweak.</p> <p></p> <p>Parameters</p> Parameter Type allow_revisions bool max_revisions integer <p>Code Sample</p> <pre><code>\"phase6\": {\n    \"name\": \"Phase with Revisions\",\n    \"fields\": {\n        \"topic\": {\n            \"type\": \"text_input\",\n            \"label\": \"Give me a topic to generate a multiple choice question for.\",\n            \"value\": \"DisneyLand\"\n        }\n    },\n    \"allow_skip\": True,\n    \"ai_response\": True,\n    \"user_prompt\": \"Please write me a single multiple choice question with three distractors and one correct answer about the following topic: {topic}\",\n    \"allow_revisions\": True,\n    \"max_revisions\": 2,\n},\n</code></pre>"},{"location":"reference_phases/#phase-with-editable-prompt","title":"Phase with Editable Prompt","text":"<p>Any phase can have the ability to view and edit the final prompt. This can be useful when you want the user to have fine-grained control over what is being sent to the AI.</p> <p></p> <p>Parameters</p> Parameter Type show_prompt bool read_only_prompt bool <p>Code Sample</p> <pre><code>\"phase7\": {\n    \"name\": \"Phase with editable prompt\",\n    \"fields\": {\n        \"domicile\": {\n            \"type\": \"radio\",\n            \"label\": \"Choose one:\",\n            \"options\": ['Shoe', 'Fishing Boat', 'Water Park'],\n        }\n    },\n    \"allow_skip\": True,\n    \"ai_response\": True,\n    \"user_prompt\": \"Write a whimsical haiku about {name} who likes {animal}(s) and lives in a {domicile}\",\n    \"show_prompt\": True,\n    \"read_only_prompt\": False\n},\n</code></pre>"},{"location":"reference_phases/#phase-combining-several-rules","title":"Phase Combining Several Rules","text":"<p>Most options can be combined. This is a phase that is skippable, scored, allows revisions, and shows an editable prompt.</p> <p></p> <p>Code Sample</p> <pre><code>\"phase8\": {\n    \"name\": \"Combining Rules\",\n    \"fields\": {\n        \"haiku\": {\n            \"type\": \"text_area\",\n            \"height\": 200,\n            \"label\": \"Write a Haiku about The Industrial Revolution.\",\n            \"value\": \"\"\"Smoke stacks pierce the sky,\n  Iron and steam reshape life\u2014\n  Machines hum, men sigh.\"\"\",\n              }\n          },\n          \"allow_skip\": True,\n          \"ai_response\": True,\n          \"phase_instructions\": \"The user will write a Haiku about the industrial revolution. You should ensure it is a traditional Haiku and it is about the topic of the industrial revolution.\",\n          \"user_prompt\": \"Here is my Haiku about the industrial revolution: \\n\\n {haiku}\",\n          \"scored_phase\": True,\n          \"rubric\": \"\"\"\n          1. Haiku:\n          2 points - The user has entered a true Haiku poem with traditional Haiku Structure.\n          1 point - The user has entered a poem of some sort.\n          0 points - The user has not entered a poem of any kind.\n          2. Topic\n          2 points - The user has mentioned the Industrial Revolution. \n          0 points - The user has NOT mentioned the Industrial Revolution. \n          \"\"\",\n          \"minimum_score\": 2,\n          \"show_prompt\": True,\n          \"read_only_prompt\": False,\n          \"allow_revisions\": True,\n          \"max_revisions\": 2,\n      }\n</code></pre>"},{"location":"reference_prompts/","title":"Prompts","text":"<p>There are several ways to build prompts in AI Microapps. One of the things that makes MicroApps powerful is the ability to adapt prompts on the backend based on user inputs. </p> <ul> <li>Prompts<ul> <li>Basic Prompt</li> <li>System Prompt</li> <li>Phase Instructions</li> <li>Conditional Prompts<ul> <li>Boolean Conditionals</li> <li>Numeric Conditionals</li> <li>String Conditionals</li> <li>Logic (and/or) Conditionals</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference_prompts/#basic-prompt","title":"Basic Prompt","text":"<p>The most basic prompt is a standalone prompt to the AI. </p> <p>You can include user input by surrounding field names in curly brackets <code>{}</code></p> <p>Code Sample</p> <pre><code>\"user_prompt\": \"My name is {name} and I like {activity}. Write a haiku about me and my activity.\",\n</code></pre>"},{"location":"reference_prompts/#system-prompt","title":"System Prompt","text":"<p>A system prompt is context provided to the AI for every request. You can think about it \"setting the tone\" for how your AI responds. </p> <p>System Prompts are their own variable in the app configuration file. They are not part of the PHASES dictionary. </p> <p></p> <p>Code Sample</p> <pre><code>  SYSTEM_PROMPT = \"You write pedagogically sound Multiple Choice Questions precisely according to user inputs.\"\n</code></pre>"},{"location":"reference_prompts/#phase-instructions","title":"Phase Instructions","text":"<p>Phase instructions are like phase-specific system prompts. They are extra instructions to the AI that are only provided for that phase. They are a way to provide additional instructions about what you want the AI to do in that step. </p> <p>Code Sample</p> <pre><code>  \"phase_instructions\": \"The user will provide you their name. In one sentence only, welcome them by name and end your statement with 'Let's try a friendly debate in order to increase your understanding and fluency in the topic.'\",\n</code></pre>"},{"location":"reference_prompts/#conditional-prompts","title":"Conditional Prompts","text":"<p>The <code>user_prompt</code> can be conditional, i.e. a prompt can depend on what the user input.</p> <p>Let's look at a simple example. Let's say we want our user to indicate via checkbox whether they want to include hints for a generated multiple choice question. We only want to prompt the AI to include hints if the user asks for them. </p> <p>This is our configuration: </p> <pre><code>  PHASES = {\n      \"phase1\": {\n          \"name\": \"Generate an MCQ\",\n          \"fields\": {\n                  \"topic\": {\n                  \"type\": \"text_input\",\n                  \"label\": \"Choose a topic\",\n              },\n              \"hints\": {\n                  \"type\": \"checkbox\",\n                  \"label\": \"Include hints?\",\n              }\n          },\n          \"show_prompt\": True,\n          \"user_prompt\": [\n              {\n                  \"condition\": {},\n                  \"prompt\": \"Please write a multiple choice question on the following topic: {topic}. \\n\\n\",\n              },\n              {\n                  \"condition\": {\"hints\": True},\n                  \"prompt\": \"Also, include a hint for the question.\"\n              },\n          ]\n      },\n  }\n</code></pre> <p>And this is the rendered app when the user does not want hints: </p> <p></p> <p>And here is the app again with the \"hints\" box checked. Note the change in the prompt. </p> <p></p>"},{"location":"reference_prompts/#boolean-conditionals","title":"Boolean Conditionals","text":"<p>Boolean values can be conditional based on whether they are True or False. If the condition is met, then the prompt snippet is included.  </p> <p>Boolean conditionals can be: </p> <ul> <li>True</li> <li>False</li> </ul> <p>Code Sample</p> <pre><code>          \"user_prompt\": [\n              {\n                  \"condition\": {},\n                  \"prompt\": \"Please write a multiple choice question on the following topic: {topic}. \\n\\n\",\n              },\n              {\n                  \"condition\": {\"hints\": True},\n                  \"prompt\": \"Also, include a hint for the question.\"\n              },\n          ]\n</code></pre>"},{"location":"reference_prompts/#numeric-conditionals","title":"Numeric Conditionals","text":"<p>Numeric values can be conditional based on numbers that you choose. If the condition is met, then the prompt snippet is included.  </p> <p>Numeric conditionals can be: </p> <ul> <li>equal to </li> <li>greater than (<code>$gt</code>)</li> <li>less than (<code>$lt</code>)</li> <li>greater than or equal to (<code>$gte</code>)</li> <li>less than or equal to (<code>$lte</code>)</li> <li>not equal to (<code>$ne</code>)</li> </ul> <p>Code Sample</p> <pre><code>          \"user_prompt\": [\n              {\n                  \"condition\": {},\n                  \"prompt\": \"Provide age appropriate movie recommendations based on my age \\n\\n\",\n              },\n              {\n                  \"condition\": {\"age\": {\"$gt\": 16}},\n                  \"prompt\": \"I am older than 16 years old.\"\n              },\n              {\n                  \"condition\": {\"age\": 16},\n                  \"prompt\": \"I am exactly 16 years old.\"\n              },\n              {\n                  \"condition\": {\"age\": {\"$lt\": 16}},\n                  \"prompt\": \"I am younger than 16 years old.\"\n              },\n          ]\n</code></pre>"},{"location":"reference_prompts/#string-conditionals","title":"String Conditionals","text":"<p>String values can be conditional based on if they match a string that you choose, or if they are contained/not contained in a list of strings. If the condition is met, then the prompt snippet is included.  </p> <p>String conditionals can be: </p> <ul> <li>equal to </li> <li>not equal to (<code>$ne</code>)</li> <li>in (<code>$in</code>)</li> <li>not in (<code>$nin</code>)</li> </ul> <p>Code Samples</p> <pre><code>          \"user_prompt\": [\n              {\n                 \"condition\": {},\n                 \"prompt\": \"I'd like to practice my {language}. I'll write a question in English and you answer the question. \\n\\n\",\n              },            \n              {\n                  \"condition\": {\"language\": \"German\"},\n                  \"prompt\": \"Please write your response in German \\n\\n\"\n              },\n              {\n                  \"condition\": {\"language\": {\"$ne\": \"Spanish\"},\n                  \"prompt\": \"Make sure not to write your answer in Spanish. \\n\\n\"\n              },\n           ]\n\n\n          \"user_prompt\": [\n              {\n                 \"condition\": {},\n                 \"prompt\": \"I am studying this language: {language}. Please quiz me. \",\n              },            \n              {\n                  \"condition\": {\"language\": {\"$in\": ['French', 'Italian', 'Portuguese', 'Spanish', 'Romanian']}},\n                  \"prompt\": \"I am studying one of the romance languages! \\n\\n\"\n              },\n           ]\n</code></pre>"},{"location":"reference_prompts/#logic-andor-conditionals","title":"Logic (and/or) Conditionals","text":"<p>Conditionals can be combined with and, or, and not</p> <ul> <li>and (<code>$and</code>)</li> <li>or (<code>$or</code>)</li> </ul> <p>Code Sample</p> <pre><code>  {\n      \"condition\": {\"$and\": [\n          {\"preferred_working_style\": \"Independent\"},\n          {\"technical_or_non_technical\": \"Technical\"},\n          {\"years_experience\": {\"$gt\": 5}}\n      ]},\n      \"prompt\": \"I prefer working independently and I am interested in a technical role. I am experienced in my field, and I am looking for a career that suits my skills and preferences.\"\n  },\n\n\n  {\n      \"condition\": {\"$or\": [\n          {\"technical_or_non_technical\": \"Non-Technical\"},\n          {\"years_experience\": {\"$lt\": 5}}\n      ]},\n      \"prompt\": \"I am likely better suited for either non-technical or junior roles.\"\n  },\n</code></pre>"}]}